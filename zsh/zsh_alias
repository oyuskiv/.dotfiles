####################################################################################
# ls
####################################################################################
alias ls='gls --color'
alias ll='gls --color -al --group-directories-first'

####################################################################################
# vim
####################################################################################
alias vim='nvim'

####################################################################################
# git
####################################################################################
alias lg='lazygit'

####################################################################################
# history
####################################################################################
# run selected history command
function fh() {
    eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf --height=50% --info=inline --reverse +s --tac --reverse --header="Run history command" | sed 's/ *[0-9]* *//')
}

# print selected history command
function fhp() {
    ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf --height=50% --info=inline --reverse +s --tac --reverse --header="Print history command" | sed 's/ *[0-9]* *//'
}

####################################################################################
# tmux functions
####################################################################################

# select pane
tsp() {
    local panes current_window current_pane target target_window target_pane
    panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
    current_pane=$(tmux display-message -p '#I:#P')
    current_window=$(tmux display-message -p '#I')

    target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --height=50% --info=inline --reverse --header="Select tmux pane") || return

    target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
    target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

    if [[ $current_window -eq $target_window ]]; then
        tmux select-pane -t ${target_window}.${target_pane}
    else
        tmux select-pane -t ${target_window}.${target_pane} &&
        tmux select-window -t $target_window
    fi
}

# create new tmux session or switch to existing one
tm() {
    [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
    if [ $1 ]; then
      tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -c ~ -s $1 && tmux $change -t "$1"); return
    fi
    session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --height=50% --info=inline --header="Select tmux session" --reverse --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# kill tmux sessions
tmk() {
    local sessions
    sessions=$(tmux ls | fzf --height=50% --info=inline --reverse --header="Kill tmux session" --exit-0 --multi) || return $?
    local i
    for i in "$sessions"
    do
        echo $i | cut -d ':' -f1 | xargs tmux kill-session -t
    done
}

####################################################################################
# fzf
####################################################################################
#change directory
fcd() {
    base_dir="."
    if [ -n "$1" ]; then
        base_dir="$1"
    fi
    selected_dir=$(fd -I -H -td -E .DS_Store -E .localized -E .git -E .Trash  -E Applications -E Music -E Pictures -E Library -E Movies --base-directory ${base_dir} | sort -n | fzf --print0 --info=inline --reverse --header="Select directory")
    if [ $? -eq 0 ]; then
        cd ${base_dir}/${selected_dir}
    fi
}

#edit file
ffo() {
    if [ -z "$1" ]; then
        #use FZF_DEFAULT_COMMAND
        #fd -H -I -E .DS_Store -E .localized -E .git -tf -tl | \
            fzf --print0 --info=inline --reverse --header="Edit file" --preview "bat --color=always {}" --bind "ctrl-d:preview-down,ctrl-u:preview-up" | \
            xargs -0 -r nvim
    else
        cd $1; \
        #use FZF_DEFAULT_COMMAND
        #fd -H -I -E .DS_Store -E .localized -E .git -tf -tl | \
            fzf --print0 --info=inline --reverse --header="Edit file" --preview "bat --color=always {}" --bind "ctrl-d:preview-down,ctrl-u:preview-up" | \
            xargs -0 -r nvim
    fi
}

fif() {
  if [ ! "$#" -gt 0 ]; then
      echo "Need a string to search for!"
      return 1
  fi
  rg --files-with-matches --no-messages "$1" | fzf --info=inline --reverse --header "Select file" --bind "ctrl-d:preview-down,ctrl-u:preview-up" --preview "bat --color=always {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}
####################################################################################
# cd
####################################################################################
cd1() {
    if [ -z "$1" ]; then
        cd ..
    else
        cd ../$1
    fi
}

cd2() {
    if [ -z "$1" ]; then
        cd ../../
    else
        cd ../../$1
    fi
}

cd3() {
    if [ -z "$1" ]; then
        cd ../../../
    else
        cd ../../../$1
    fi
}

cd4() {
    if [ -z "$1" ]; then
        cd ../../../../
    else
        cd ../../../../$1
    fi
}

cd5() {
    if [ -z "$1" ]; then
        cd ../../../../../
    else
        cd ../../../../../$1
    fi
}

# create alias for recently visited directories
setopt AUTO_PUSHD           # Push the current directory visited on the stack.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd.
alias d="dirs -v | head -n 5 | awk '{print \$1 + 1, \$2}'"
for index ({1..5}) alias "$index"="cd +$((index - 1))"; unset index

# change working dir in shell to last dir in lf on exit
lfcd () {
    # `command` is needed in case `lfcd` is aliased to `lf`
    cd "$(command lf -print-last-dir "$@")"
}

####################################################################################
# python
####################################################################################
# activate python venv
pyenv() {
    if [ -f $HOME/.local/python/$1/bin/activate ]; then
        echo -e "\033[0;32mactivate python venv $1\033[0m"
        source $HOME/.local/python/$1/bin/activate
    else
        echo -e "\033[0;31mpython venv $1 not found\033[0m"
    fi
}
