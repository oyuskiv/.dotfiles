autoload -Uz vcs_info
setopt prompt_subst

# setup a hook that runs before every ptompt.
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
precmd_functions+=( set_promt )

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git*' stagedstr '+'
zstyle ':vcs_info:git*' unstagedstr '*'
zstyle ':vcs_info:git*+set-message:*' hooks git-set-message
zstyle ':vcs_info:git:*' actionformats "%{$fg[yellow]%}: %{$fg[magenta]%}%b %u%c|%{$fg[red]%}%a %m%{$reset_color%}"
zstyle ':vcs_info:git:*' formats "%{$fg[yellow]%}: %{$fg[magenta]%}%b %u%c%m%{$reset_color%}"
zstyle ':vcs_info:git:*' patch-format "%n/%a"

#zstyle ':vcs_info:*+*:*' debug true

+vi-git-set-message(){
    if git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' >/dev/null 2>/dev/null ; then
        hook_com[staged]+='!'
    fi

    remote=''
    ahead=''
    behind=''
    separator=' '
    count="$(git rev-list --count --left-right "@{upstream}"...HEAD 2>/dev/null)"
    case "$count" in
	    "") # no upstream
		    ;;
		"0	0") # equal to upstream
            hook_com[branch]=${remote}${separator}${hook_com[branch]} ;;
		"0	"*) # ahead of upstream
			hook_com[branch]=${remote}${ahead}${separator}${hook_com[branch]} ;;
		*"	0") # behind upstream
			hook_com[branch]=${remote}${behind}${separator}${hook_com[branch]} ;;
		*)	    # diverged from upstream
            hook_com[branch]=${remote}${behind}${ahead}${separator}${hook_com[branch]} ;;
	esac
}

set_promt() {
    if [ ! -z $VIRTUAL_ENV ] ; then
        pyenv="( $(basename $VIRTUAL_ENV))"
    else
        pyenv=""
    fi
    PROMPT="%B%{$fg[cyan]%}%n%{$fg[blue]%}@%{$fg[green]%}%m:%{$fg[yellow]%}%~${pyenv}%{$reset_color%}%b"$'${vcs_info_msg_0_}\n$ '
}
